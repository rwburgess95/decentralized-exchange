{"ast":null,"code":"import _regeneratorRuntime from \"/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded } from './actions';\nimport Token from '../abis/Token.json';\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var web3;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof window.ethereum !== 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            web3 = new Web3(window.ethereum);\n            dispatch(web3Loaded(web3));\n            return _context.abrupt(\"return\", web3);\n\n          case 6:\n            window.alert('Please install MetaMask');\n            window.location.assign(\"https://metamask.io/\");\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3.eth.requestAccounts();\n\n          case 2:\n            accounts = _context2.sent;\n            _context2.next = 5;\n            return accounts[0];\n\n          case 5:\n            account = _context2.sent;\n\n            if (!(typeof account !== 'undefined')) {\n              _context2.next = 11;\n              break;\n            }\n\n            dispatch(web3AccountLoaded(account));\n            return _context2.abrupt(\"return\", account);\n\n          case 11:\n            window.alert('Please login with MetaMask');\n            return _context2.abrupt(\"return\", null);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadAccount(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context3.abrupt(\"return\", token);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","Token","loadWeb3","dispatch","window","ethereum","web3","alert","location","assign","loadAccount","eth","requestAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","console","log"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,SACCC,UADD,EAECC,iBAFD,EAGCC,WAHD,QAIO,WAJP;AAKA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,QAAQ;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACnB,OAAOC,MAAM,CAACC,QAAd,KAAyB,WADN;AAAA;AAAA;AAAA;;AAEdC,YAAAA,IAFc,GAEP,IAAIT,IAAJ,CAASO,MAAM,CAACC,QAAhB,CAFO;AAGpBF,YAAAA,QAAQ,CAACL,UAAU,CAACQ,IAAD,CAAX,CAAR;AAHoB,6CAIbA,IAJa;;AAAA;AAMpBF,YAAAA,MAAM,CAACG,KAAP,CAAa,yBAAb;AACAH,YAAAA,MAAM,CAACI,QAAP,CAAgBC,MAAhB,CAAuB,sBAAvB;;AAPoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARP,QAAQ;AAAA;AAAA;AAAA,GAAd;AAWP,OAAO,IAAMQ,WAAW;AAAA,uEAAG,kBAAOJ,IAAP,EAAaH,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFG,IAAI,CAACK,GAAL,CAASC,eAAT,EADE;;AAAA;AACnBC,YAAAA,QADmB;AAAA;AAAA,mBAEHA,QAAQ,CAAC,CAAD,CAFL;;AAAA;AAEnBC,YAAAA,OAFmB;;AAAA,kBAGtB,OAAOA,OAAP,KAAmB,WAHG;AAAA;AAAA;AAAA;;AAIvBX,YAAAA,QAAQ,CAACJ,iBAAiB,CAACe,OAAD,CAAlB,CAAR;AAJuB,8CAKhBA,OALgB;;AAAA;AAOvBV,YAAAA,MAAM,CAACG,KAAP,CAAa,4BAAb;AAPuB,8CAQhB,IARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXG,WAAW;AAAA;AAAA;AAAA,GAAjB;AAYP,OAAO,IAAMK,SAAS;AAAA,uEAAG,kBAAOT,IAAP,EAAaU,SAAb,EAAwBb,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfc,YAAAA,KAFe,GAEP,IAAIX,IAAI,CAACK,GAAL,CAASO,QAAb,CAAsBjB,KAAK,CAACkB,GAA5B,EAAiClB,KAAK,CAACmB,QAAN,CAAeJ,SAAf,EAA0BK,OAA3D,CAFO;AAGrBlB,YAAAA,QAAQ,CAACH,WAAW,CAACiB,KAAD,CAAZ,CAAR;AAHqB,8CAIdA,KAJc;;AAAA;AAAA;AAAA;AAMrBK,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AANqB,8CAOd,IAPc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATR,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import Web3 from 'web3'\n\nimport {\n\tweb3Loaded,\n\tweb3AccountLoaded,\n\ttokenLoaded\n} from './actions'\nimport Token from '../abis/Token.json'\n\nexport const loadWeb3 = async (dispatch) => {\n  if(typeof window.ethereum!=='undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign(\"https://metamask.io/\")\n  }\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.requestAccounts()\n  const account = await accounts[0]\n  if(typeof account !== 'undefined'){\n    dispatch(web3AccountLoaded(account))\n    return account\n  } else {\n    window.alert('Please login with MetaMask')\n    return null\n  }\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}"]},"metadata":{},"sourceType":"module"}