{"ast":null,"code":"import _regeneratorRuntime from \"/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded, cancelledOrdersLoaded, filledOrdersLoaded, allOrdersLoaded, orderCancelling } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var web3;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof window.ethereum !== 'undefined')) {\n              _context.next = 6;\n              break;\n            }\n\n            web3 = new Web3(window.ethereum);\n            dispatch(web3Loaded(web3));\n            return _context.abrupt(\"return\", web3);\n\n          case 6:\n            window.alert('Please install MetaMask');\n            window.location.assign(\"https://metamask.io/\");\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3.eth.requestAccounts();\n\n          case 2:\n            accounts = _context2.sent;\n            _context2.next = 5;\n            return accounts[0];\n\n          case 5:\n            account = _context2.sent;\n\n            if (!(typeof account !== 'undefined')) {\n              _context2.next = 11;\n              break;\n            }\n\n            dispatch(web3AccountLoaded(account));\n            return _context2.abrupt(\"return\", account);\n\n          case 11:\n            window.alert('Please login with MetaMask');\n            return _context2.abrupt(\"return\", null);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadAccount(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context3.abrupt(\"return\", token);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var loadExchange = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(web3, networkId, dispatch) {\n    var exchange;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n            dispatch(exchangeLoaded(exchange));\n            return _context4.abrupt(\"return\", exchange);\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context4.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 6]]);\n  }));\n\n  return function loadExchange(_x7, _x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var loadAllOrders = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(exchange, dispatch) {\n    var cancelStream, cancelledOrders, tradeStream, filledOrders, orderStream, allOrders;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return exchange.getPastEvents('Cancel', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 2:\n            cancelStream = _context5.sent;\n            // Format cancelled orders\n            cancelledOrders = cancelStream.map(function (event) {\n              return event.returnValues;\n            }); // Add cancelled orders to the redux store\n\n            dispatch(cancelledOrdersLoaded(cancelledOrders)); // Fetch filled orders with the \"Trade\" event stream\n\n            _context5.next = 7;\n            return exchange.getPastEvents('Trade', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 7:\n            tradeStream = _context5.sent;\n            // Format filled orders\n            filledOrders = tradeStream.map(function (event) {\n              return event.returnValues;\n            }); // Add cancelled orders to the redux store\n\n            dispatch(filledOrdersLoaded(filledOrders)); // Load order stream\n\n            _context5.next = 12;\n            return exchange.getPastEvents('Order', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 12:\n            orderStream = _context5.sent;\n            // Format order stream\n            allOrders = orderStream.map(function (event) {\n              return event.returnValues;\n            }); // Add open orders to the redux store\n\n            dispatch(allOrdersLoaded(allOrders));\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function loadAllOrders(_x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var cancelOrder = function cancelOrder(dispatch, exchange, order, account) {\n  exchange.methods.cancelOrder(order.id).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(orderCancelling());\n  }).on('error', function (error) {\n    console.log(error);\n    window.alert('There was an error!');\n  });\n};","map":{"version":3,"sources":["/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","cancelledOrdersLoaded","filledOrdersLoaded","allOrdersLoaded","orderCancelling","Token","Exchange","loadWeb3","dispatch","window","ethereum","web3","alert","location","assign","loadAccount","eth","requestAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","console","log","loadExchange","exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","cancelledOrders","map","event","returnValues","tradeStream","filledOrders","orderStream","allOrders","cancelOrder","order","methods","id","send","from","on","hash","error"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\n\nimport {\n\tweb3Loaded,\n\tweb3AccountLoaded,\n\ttokenLoaded,\n\texchangeLoaded,\n  cancelledOrdersLoaded,\n  filledOrdersLoaded,\n  allOrdersLoaded,\n  orderCancelling\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\nexport const loadWeb3 = async (dispatch) => {\n  if(typeof window.ethereum!=='undefined'){\n    const web3 = new Web3(window.ethereum)\n    dispatch(web3Loaded(web3))\n    return web3\n  } else {\n    window.alert('Please install MetaMask')\n    window.location.assign(\"https://metamask.io/\")\n  }\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n  const accounts = await web3.eth.requestAccounts()\n  const account = await accounts[0]\n  if(typeof account !== 'undefined'){\n    dispatch(web3AccountLoaded(account))\n    return account\n  } else {\n    window.alert('Please login with MetaMask')\n    return null\n  }\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n  try {\n    const token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n    dispatch(tokenLoaded(token))\n    return token\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n  try {\n    const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n    dispatch(exchangeLoaded(exchange))\n    return exchange\n  } catch (error) {\n    console.log('Contract not deployed to the current network. Please select another network with Metamask.')\n    return null\n  }\n}\n\nexport const loadAllOrders = async (exchange, dispatch) => {\n  // Fetch cancelled orders with the \"Cancel\" event stream\n  const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\n  // Format cancelled orders\n  const cancelledOrders = cancelStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(cancelledOrdersLoaded(cancelledOrders))\n\n  // Fetch filled orders with the \"Trade\" event stream\n  const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest' })\n  // Format filled orders\n  const filledOrders = tradeStream.map((event) => event.returnValues)\n  // Add cancelled orders to the redux store\n  dispatch(filledOrdersLoaded(filledOrders))\n\n  // Load order stream\n  const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0,  toBlock: 'latest' })\n  // Format order stream\n  const allOrders = orderStream.map((event) => event.returnValues)\n  // Add open orders to the redux store\n  dispatch(allOrdersLoaded(allOrders))\n}\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n  exchange.methods.cancelOrder(order.id).send({ from: account })\n  .on('transactionHash', (hash) => {\n     dispatch(orderCancelling())\n  })\n  .on('error', (error) => {\n    console.log(error)\n    window.alert('There was an error!')\n  })\n}\n\n\n"]},"metadata":{},"sourceType":"module"}