{"ast":null,"code":"import _regeneratorRuntime from \"/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded } from './actions';\nexport var loadWeb3 = function loadWeb3(dispatch) {\n  var web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n  dispatch(web3Loaded(web3));\n  return web3;\n};\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, web3) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(web3));\n            return _context.abrupt(\"return\", account);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadAccount(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/raymondburgess/Dapps/blockchain-developer-bootcamp-v2/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","loadWeb3","dispatch","web3","givenProvider","loadAccount","eth","getAccounts","accounts","account"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,SACCC,UADD,EAECC,iBAFD,QAGO,WAHP;AAKA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AACrC,MAAMC,IAAI,GAAG,IAAIL,IAAJ,CAASA,IAAI,CAACM,aAAL,IAAsB,uBAA/B,CAAb;AACAF,EAAAA,QAAQ,CAACH,UAAU,CAACI,IAAD,CAAX,CAAR;AACA,SAAOA,IAAP;AACA,CAJM;AAMP,OAAO,IAAME,WAAW;AAAA,sEAAG,iBAAOH,QAAP,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHA,IAAI,CAACG,GAAL,CAASC,WAAT,EADG;;AAAA;AACpBC,YAAAA,QADoB;AAEpBC,YAAAA,OAFoB,GAEVD,QAAQ,CAAC,CAAD,CAFE;AAG1BN,YAAAA,QAAQ,CAACF,iBAAiB,CAACG,IAAD,CAAlB,CAAR;AAH0B,6CAInBM,OAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import Web3 from 'web3'\n\nimport {\n\tweb3Loaded,\n\tweb3AccountLoaded\n} from './actions'\n\nexport const loadWeb3 = (dispatch) => {\n\tconst web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\n\tdispatch(web3Loaded(web3))\n\treturn web3\n}\n\nexport const loadAccount = async (dispatch, web3) => {\n\tconst accounts = await web3.eth.getAccounts()\n\tconst account = accounts[0]\n\tdispatch(web3AccountLoaded(web3))\n\treturn account\n}"]},"metadata":{},"sourceType":"module"}